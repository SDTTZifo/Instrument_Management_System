Category.py
from django.db import models

class Category(models.Model):
    category_name = models.CharField(max_length=100, unique=True)
    category_description = models.TextField() 

    def __str__(self):
        return self.category_name

category_view.py

from django.shortcuts import redirect, render, get_object_or_404
from django.contrib import messages
from Inventory.models import Category, Instrument, Location
from django.contrib.auth.decorators import login_required
from django.contrib.auth import logout
from django.db.models import Q
from django.core.exceptions import PermissionDenied
from django.http import JsonResponse

@login_required
def category_view(request):
    try:
        if not request.user.has_perm('category.view_category'):
            raise PermissionDenied()
        query = request.GET.get('query', '')  # Get the query parameter, default to an empty string
        if query:
            # Filter categories based on the search query for both name and description
            categories = Category.objects.filter(
                Q(category_name__icontains=query) | Q(category_description__icontains=query)
            )
        else:
            # If no search query, retrieve all categories
            categories = Category.objects.all()

        return render(request, 'categories/categories.html', {
            'categories': categories,
            'query': query  # Pass the query back to the template to keep the search field populated
        })
    except Exception as e:
        raise

@login_required
def add_category_view(request):
    try:
        if not request.user.has_perm('category.add_category'):
            raise PermissionDenied()    
        if request.method == 'POST':
            category_name = request.POST.get('category_name')
            category_description = request.POST.get('category_description')       

            # Create a new category object and save it to the database
            new_category = Category(
                category_name=category_name,
                category_description=category_description
            )
            new_category.save()  # Save to database

            return redirect('categories')  # Redirect to categories view after saving

        return render(request, 'categories/add_category.html')
    except Exception as e:
        raise


def edit_category_view(request, category_id):
    try:
        category = get_object_or_404(Category, id=category_id)  # Fetch the category or return 404 if not found

        if request.method == 'POST':
            category.category_name = request.POST.get('category_name')
            category.category_description = request.POST.get('category_description')
            category.save()  # Save the updated category to the database

            return redirect('categories')  # Redirect to categories view after saving

        return render(request, 'categories/edit_category.html', {'category': category})
    except Exception as e:
        raise


def delete_category_view(request, category_id):
    try:
        category = get_object_or_404(Category, id=category_id)

        if request.method == 'POST':
            category.delete()  # Delete the category

            if request.headers.get('x-requested-with') == 'XMLHttpRequest':  # Check if it's an AJAX request
                return JsonResponse({'message': 'Category deleted successfully'})

            return redirect('categories')  # Redirect if not an AJAX request
    except Exception as e:
        raise


@login_required  
def search_category_view(request):
    try:
        if not request.user.has_perm('category.view_category'):
            raise PermissionDenied()        
        if request.method == 'GET': # this will be GET now      
            category_name =  request.GET.get('query') # do some research what it does       
            try:
                categories = Category.objects.filter(category_name__icontains=category_name) # filter returns a list so you might consider skip except part
                return render(request, 'categories/categories.html', {'categories': categories})
            except:
                return render(request, 'categories/categories.html', {})
        else:
            return render(request, 'categories/categories.html', {})
    except Exception as e:
        raise


