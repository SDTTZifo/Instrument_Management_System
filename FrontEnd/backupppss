Clinical Trial Data Management with GraphQL

Project Overview:
	
	This is a GraphQL demo application designed to highlight the capabilities of GraphQL in handling complex queries and nested querying. It is not a web application but a GraphQL API application. The focus will be on performing advanced queries through the GraphQL API console.
	
	Clinical trials generate vast amounts of data crucial for developing new drugs and treatments. Managing this data, ranging from patient information to genetic experiments and trial outcomes—requires efficient tools. A GraphQL-based Clinical Trial Data Management system streamlines the querying, analysis, and management of these datasets, facilitating insight generation, progress tracking, and regulatory compliance.
	
Example:
	
	A pharmaceutical company is advancing a new cancer drug, "ABC," targeting genetic markers for breast cancer. As the drug moves into human trials, the company needs to manage and analyze extensive data, including patient records, genetic information, trial results, and regulatory statuses. This application provides the necessary infrastructure to handle these complexities efficiently.
	
Use cases:

	1. Trial Status and Progress Tracking
		○ Objective: Track the current status and progress of ongoing and completed clinical trials.
		○ Details:
			§ Experiment Information:
				□ Type: Genetic experiments.
				□ Subjects: Humans, animals or birds.
			§ Status:
				□ Trials can be categorized as Ongoing, Completed, Approved, Published to Market, or Terminated/Banned.
				□ Detailed status reporting, including milestones like Phase I/II/III completion, Regulatory Approval, and Market Launch.
				
	2. Genetic Experiment Details
		○ Objective: Retrieve detailed information on genetic experiments conducted during clinical trials.
		○ Details:
			§ Experiment Information:
				□ Species: Animals (e.g., rodents, primates), humans.
				□ Genetic Focus: Identifying genetic markers associated with adverse reactions.
				□ Subject Information: Number of subjects, species, and genetic modifications.
	
	3. Drug Approval and Market Release Status
		○ Objective: Query the approval status and market release information for drugs tested in clinical trials.
		○ Details:
			§ Approval Information:
				□ Drugs can be in various stages: Approved, Awaiting Approval, Banned, or Published to Market.
				□ Status updates can include reasons for rejection or banning (e.g., adverse effects, insufficient efficacy).
				
	4. Adverse Effects and Safety Monitoring
		○ Objective: Monitor and query data on adverse effects reported during and after clinical trials.
		○ Details:
			§ Experiment Information:
				□ Subjects: Human, animal, bird trials.
				□ Adverse Effects: Reported side effects, severity, frequency.
				□ Safety Measures: Monitoring protocols, risk assessments.
				
	5. Banned Components and Regulatory Compliance
		○ Objective: Query information on components or drugs banned during trials due to regulatory or safety concerns.
		○ Details:
			§ Banned Components:
				□ Reasons for Ban: Adverse effects, environmental impact, ethical concerns.
				□ Regulatory Actions: Recall, market withdrawal, legal implications.



// Models/Trial.cs
public class Trial
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Status { get; set; }
    public string Phase { get; set; }
    public string ExperimentType { get; set; }
    public List<Experiment> Experiments { get; set; } = new List<Experiment>();
    public List<AdverseEffect> AdverseEffects { get; set; } = new List<AdverseEffect>();
    public Drug Drug { get; set; }
}

// Models/Experiment.cs
public class Experiment
{
    public int Id { get; set; }
    public string Species { get; set; }
    public string GeneticFocus { get; set; }
    public int NumberOfSubjects { get; set; }
    public bool HasGeneticModification { get; set; }
    public int TrialId { get; set; }
    public Trial Trial { get; set; }
}

// Models/Drug.cs
public class Drug
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string ApprovalStatus { get; set; }
    public string MarketReleaseStatus { get; set; }
    public string BanReason { get; set; }
}

// Models/AdverseEffect.cs
public class AdverseEffect
{
    public int Id { get; set; }
    public string Effect { get; set; }
    public string Severity { get; set; }
    public string Frequency { get; set; }
    public int TrialId { get; set; }
    public Trial Trial { get; set; }
}


// GraphQL/Types/TrialType.cs
public class TrialType : ObjectGraphType<Trial>
{
    public TrialType()
    {
        Field(x => x.Id);
        Field(x => x.Name);
        Field(x => x.Status);
        Field(x => x.Phase);
        Field(x => x.ExperimentType);
        Field<ListGraphType<ExperimentType>>("experiments");
        Field<ListGraphType<AdverseEffectType>>("adverseEffects");
        Field<DrugType>("drug");
    }
}

// GraphQL/Types/ExperimentType.cs
public class ExperimentType : ObjectGraphType<Experiment>
{
    public ExperimentType()
    {
        Field(x => x.Id);
        Field(x => x.Species);
        Field(x => x.GeneticFocus);
        Field(x => x.NumberOfSubjects);
        Field(x => x.HasGeneticModification);
    }
}

// Similarly create DrugType and AdverseEffectType
public class DrugType : ObjectGraphType<Drug>
    {
        public DrugType()
        {
            Field(x => x.Id).Description("The ID of the drug.");
            Field(x => x.Name).Description("The name of the drug.");
            Field(x => x.ApprovalStatus).Description("The approval status of the drug (e.g., Approved, Awaiting Approval, Banned).");
            Field(x => x.MarketReleaseStatus, nullable: true).Description("The market release status of the drug, if available.");
            Field(x => x.BanReason, nullable: true).Description("The reason for banning the drug, if applicable.");
        }
    }

public class AdverseEffectType : ObjectGraphType<AdverseEffect>
    {
        public AdverseEffectType()
        {
            Field(x => x.Id).Description("The ID of the adverse effect.");
            Field(x => x.Effect).Description("The description of the adverse effect.");
            Field(x => x.Severity).Description("The severity level of the adverse effect (e.g., Mild, Moderate, Severe).");
            Field(x => x.Frequency).Description("The frequency of occurrence of the adverse effect.");
        }
    }

// GraphQL/Types/BannerComponentType.cs
using GraphQL.Types;
using ClinicalTrialsGraphQL.Models;

namespace ClinicalTrialsGraphQL.GraphQL.Types
{
    public class BannerComponentType : ObjectGraphType<BannerComponent>
    {
        public BannerComponentType()
        {
            Field(x => x.Id).Description("The ID of the banned component.");
            Field(x => x.ComponentName).Description("The name of the banned component.");
            Field(x => x.BanReason).Description("The reason for banning the component (e.g., Adverse effects, ethical concerns).");
            Field(x => x.RegulatoryAction).Description("The regulatory action taken against the banned component (e.g., Recall, Market Withdrawal).");
        }
    }
}



// GraphQL/Queries/ClinicalTrialsQuery.cs
public class ClinicalTrialsQuery : ObjectGraphType
{
    public ClinicalTrialsQuery(ClinicalTrialsDbContext dbContext)
    {
        Field<ListGraphType<TrialType>>(
            "trials",
            resolve: context => dbContext.Trials.Include(t => t.Experiments).Include(t => t.AdverseEffects).Include(t => t.Drug)
        );

        Field<ListGraphType<ExperimentType>>(
            "experiments",
            resolve: context => dbContext.Experiments
        );

        Field<ListGraphType<DrugType>>(
            "drugs",
            resolve: context => dbContext.Drugs
        );

        Field<ListGraphType<AdverseEffectType>>(
            "adverseEffects",
            resolve: context => dbContext.AdverseEffects
        );
    }
}

// GraphQL/Queries/ClinicalTrialQuery.cs
using GraphQL.Types;
using ClinicalTrialsGraphQL.Data;
using ClinicalTrialsGraphQL.Models;

namespace ClinicalTrialsGraphQL.GraphQL.Queries
{
    public class ClinicalTrialQuery : ObjectGraphType
    {
        public ClinicalTrialQuery(ClinicalTrialsDbContext dbContext)
        {
            Field<ListGraphType<TrialType>>(
                "trials",
                resolve: context => dbContext.Trials.ToList()
            );

            // Query to fetch Banner Components by Trial ID
            Field<ListGraphType<BannerComponentType>>(
                "bannerComponents",
                arguments: new QueryArguments(
                    new QueryArgument<IntGraphType> { Name = "trialId" }
                ),
                resolve: context =>
                {
                    var trialId = context.GetArgument<int?>("trialId");
                    return trialId == null
                        ? dbContext.BannerComponents.ToList()
                        : dbContext.BannerComponents.Where(b => b.TrialId == trialId).ToList();
                }
            );
        }
    }
}


// GraphQL/ClinicalTrialsSchema.cs
public class ClinicalTrialsSchema : Schema
{
    public ClinicalTrialsSchema(IServiceProvider provider) : base(provider)
    {
        Query = provider.GetRequiredService<ClinicalTrialsQuery>();
    }
}

// GraphQL/Schema/ClinicalTrialSchema.cs
using GraphQL.Types;
using ClinicalTrialsGraphQL.GraphQL.Queries;

namespace ClinicalTrialsGraphQL.GraphQL
{
    public class ClinicalTrialSchema : Schema
    {
        public ClinicalTrialSchema(ClinicalTrialQuery query)
        {
            Query = query;
        }
    }
}

public void ConfigureServices(IServiceCollection services)
{
    services.AddDbContext<ClinicalTrialsDbContext>(options =>
        options.UseSqlServer("Your_Connection_String"));

    services.AddScoped<ClinicalTrialsQuery>();
    services.AddScoped<TrialType>();
    services.AddScoped<ExperimentType>();
    services.AddScoped<DrugType>();
    services.AddScoped<AdverseEffectType>();
    services.AddScoped<ISchema, ClinicalTrialsSchema>();

    services.AddGraphQL(options =>
    {
        options.EnableMetrics = false;
    })
    .AddSystemTextJson()
    .AddGraphTypes(ServiceLifetime.Scoped);
}
public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
{
    if (env.IsDevelopment())
    {
        app.UseDeveloperExceptionPage();
    }

    app.UseRouting();

    app.UseEndpoints(endpoints =>
    {
        endpoints.MapGraphQL("/graphql");
    });

    app.UseGraphQLPlayground(new GraphQLPlaygroundOptions
    {
        Path = "/playground"
    });
}


query {
    trials(where: { status: "Ongoing", phase: "Phase III" }) {
        name
        status
        phase
        experiments {
            experimentType
            species
        }
    }
}


query {
    experiments(where: { geneticFocus: "Markers for Adverse Reactions" }) {
        species
        numberOfSubjects
        hasGeneticModification
        trial {
            name
            status
        }
    }
}

query {
    drugs(where: { approvalStatus: "Approved" }) {
        name
        approvalStatus
        marketReleaseStatus
    }
}

query {
    adverseEffects(where: { severity: "High" }) {
        effect
        frequency
        trial {
            name
            status
        }
    }
}

query {
    drugs(where: { banReason: { neq: null } }) {
        name
        banReason
    }
}




// GraphQL/Queries/ClinicalTrialQuery.cs
using GraphQL.Types;
using ClinicalTrialsGraphQL.Data;
using ClinicalTrialsGraphQL.Models;
using System.Linq;

namespace ClinicalTrialsGraphQL.GraphQL.Queries
{
    public class ClinicalTrialQuery : ObjectGraphType
    {
        public ClinicalTrialQuery(ClinicalTrialsDbContext dbContext)
        {
            // Query for all Trials
            Field<ListGraphType<TrialType>>(
                "trials",
                resolve: context => dbContext.Trials.ToList()
            );

            // Query for a single Trial by ID
            Field<TrialType>(
                "trial",
                arguments: new QueryArguments(
                    new QueryArgument<IntGraphType> { Name = "id" }
                ),
                resolve: context =>
                {
                    var trialId = context.GetArgument<int>("id");
                    return dbContext.Trials.FirstOrDefault(t => t.Id == trialId);
                }
            );

            // Query for all Banner Components
            Field<ListGraphType<BannerComponentType>>(
                "bannerComponents",
                resolve: context => dbContext.BannerComponents.ToList()
            );

            // Query for Banner Components filtered by Trial ID
            Field<ListGraphType<BannerComponentType>>(
                "bannerComponentsByTrial",
                arguments: new QueryArguments(
                    new QueryArgument<IntGraphType> { Name = "trialId" }
                ),
                resolve: context =>
                {
                    var trialId = context.GetArgument<int?>("trialId");
                    return trialId == null
                        ? dbContext.BannerComponents.ToList()
                        : dbContext.BannerComponents.Where(b => b.TrialId == trialId).ToList();
                }
            );

            // Query for all Experiments
            Field<ListGraphType<ExperimentType>>(
                "experiments",
                resolve: context => dbContext.Experiments.ToList()
            );

            // Query for a single Experiment by ID
            Field<ExperimentType>(
                "experiment",
                arguments: new QueryArguments(
                    new QueryArgument<IntGraphType> { Name = "id" }
                ),
                resolve: context =>
                {
                    var experimentId = context.GetArgument<int>("id");
                    return dbContext.Experiments.FirstOrDefault(e => e.Id == experimentId);
                }
            );

            // Query for all Drugs
            Field<ListGraphType<DrugType>>(
                "drugs",
                resolve: context => dbContext.Drugs.ToList()
            );

            // Query for a single Drug by ID
            Field<DrugType>(
                "drug",
                arguments: new QueryArguments(
                    new QueryArgument<IntGraphType> { Name = "id" }
                ),
                resolve: context =>
                {
                    var drugId = context.GetArgument<int>("id");
                    return dbContext.Drugs.FirstOrDefault(d => d.Id == drugId);
                }
            );

            // Query for all Adverse Effects
            Field<ListGraphType<AdverseEffectType>>(
                "adverseEffects",
                resolve: context => dbContext.AdverseEffects.ToList()
            );

            // Query for Adverse Effects by Trial ID
            Field<ListGraphType<AdverseEffectType>>(
                "adverseEffectsByTrial",
                arguments: new QueryArguments(
                    new QueryArgument<IntGraphType> { Name = "trialId" }
                ),
                resolve: context =>
                {
                    var trialId = context.GetArgument<int?>("trialId");
                    return trialId == null
                        ? dbContext.AdverseEffects.ToList()
                        : dbContext.AdverseEffects.Where(a => a.TrialId == trialId).ToList();
                }
            );
        }
    }
}

// GraphQL/Schema/ClinicalTrialSchema.cs
using GraphQL.Types;
using ClinicalTrialsGraphQL.GraphQL.Queries;

namespace ClinicalTrialsGraphQL.GraphQL
{
    public class ClinicalTrialSchema : Schema
    {
        public ClinicalTrialSchema(ClinicalTrialQuery query)
        {
            Query = query;  // This sets the root query for GraphQL to `ClinicalTrialQuery`
        }
    }
}


var builder = WebApplication.CreateBuilder(args);

builder.Services.AddScoped<ClinicalTrialQuery>();  // Register the query
builder.Services.AddScoped<ISchema, ClinicalTrialSchema>();  // Register the schema

builder.Services.AddGraphQL(options =>
{
    options.EnableMetrics = false;  // Optional: Disable metrics for simplicity
})
.AddSystemTextJson()  // Add support for JSON serialization
.AddGraphTypes(ServiceLifetime.Scoped);  // Add GraphQL types (register all GraphQL types in scoped lifetime)

var app = builder.Build();

// Configure the GraphQL endpoint
app.UseGraphQL<ISchema>();

app.Run();

public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
{
    app.UseRouting();

    // Enable GraphQL Playground UI for testing
    app.UseGraphQLPlayground(new GraphQLPlaygroundOptions
    {
        Path = "/graphql",  // Path to access GraphQL playground
        QueryPath = "/graphql"
    });

    app.UseEndpoints(endpoints =>
    {
        endpoints.MapGraphQL();  // Map the GraphQL endpoint to /graphql
    });
}

var app = builder.Build();

app.UseRouting();

// Enable GraphQL Playground UI for testing
app.UseGraphQLPlayground(new GraphQLPlaygroundOptions
{
    Path = "/graphql",  // Path to access GraphQL playground
    QueryPath = "/graphql"
});

app.MapGraphQL();  // Map the GraphQL endpoint to /graphql

app.Run();


{
  trials {
    id
    name
    status
    phase
    experimentType
    drug {
      id
      name
    }
  }
}

{
  bannerComponents {
    id
    componentName
    banReason
    regulatoryAction
  }
}

{
  experiment(id: 1) {
    id
    species
    geneticFocus
    numberOfSubjects
    hasGeneticModification
  }
}



using GraphQL.Types;
using ClinicalTrialsGraphQL.Models;  // Assuming you have models like Trial, Experiment, etc.

namespace ClinicalTrialsGraphQL.GraphQL.Types
{
    // TrialType for querying clinical trials
    public class TrialType : ObjectGraphType<Trial>
    {
        public TrialType()
        {
            Field(x => x.Id);
            Field(x => x.Name);
            Field(x => x.Status);
            Field(x => x.Phase);
            Field(x => x.ExperimentType);
            Field<ListGraphType<ExperimentType>>("experiments");
            Field<ListGraphType<AdverseEffectType>>("adverseEffects");
            Field<DrugType>("drug");
            Field<ListGraphType<BannerComponentType>>("bannerComponents");
        }
    }

    // ExperimentType for querying experiment data
    public class ExperimentType : ObjectGraphType<Experiment>
    {
        public ExperimentType()
        {
            Field(x => x.Id);
            Field(x => x.Species);
            Field(x => x.GeneticFocus);
            Field(x => x.NumberOfSubjects);
            Field(x => x.HasGeneticModification);
        }
    }

    // DrugType for querying drug information
    public class DrugType : ObjectGraphType<Drug>
    {
        public DrugType()
        {
            Field(x => x.Id);
            Field(x => x.Name);
            Field(x => x.Status);
            Field(x => x.ApprovalStatus);
        }
    }

    // AdverseEffectType for querying adverse effects from clinical trials
    public class AdverseEffectType : ObjectGraphType<AdverseEffect>
    {
        public AdverseEffectType()
        {
            Field(x => x.Id);
            Field(x => x.SideEffect);
            Field(x => x.Severity);
            Field(x => x.Frequency);
        }
    }

    // BannerComponentType for querying banned components and regulatory actions
    public class BannerComponentType : ObjectGraphType<BannerComponent>
    {
        public BannerComponentType()
        {
            Field(x => x.Id);
            Field(x => x.ComponentName);
            Field(x => x.BanReason);
            Field(x => x.RegulatoryAction);
        }
    }
}



using GraphQL.Types;
using GraphQL_Presentation_Demo.Models;

namespace GraphQL_Presentation_Demo.GraphQL
{
    public class TrialType : ObjectGraphType<ClinicalTrial>
    {
        public TrialType()
        {
            Field(x => x.Id);
            Field(x => x.Name);
            Field(x => x.CurrentStatus);
            Field(x => x.Phase);
            Field(x => x.StartDate);
            Field(x => x.EndDate);
            Field<ListGraphType<ExperimentType>>("experiments");
            Field<ListGraphType<AdverseEffectType>>("adverseEffects");
            Field<DrugType>("drug");
        }
    }

    public class ExperimentType : ObjectGraphType<Experiment>
    {
        public ExperimentType()
        {
            Field(x => x.Id);
            Field(x => x.Species);
            Field(x => x.GeneticFocus);
            Field(x => x.SubjectCount);
            Field(x => x.Type);
            Field(x => x.ClinicalTrialId);
            Field(x => x.SubjectType);
        }
    }

    public class DrugType : ObjectGraphType<Drug>
    {
        public DrugType()
        {
            Field(x => x.Id).Description("The ID of the drug.");
            Field(x => x.Name).Description("The name of the drug.");
            Field(x => x.ApprovalStatus).Description("The approval status of the drug (e.g., Approved, Awaiting Approval, Banned).");
            Field(x => x.MarketStatus, nullable: true).Description("The market release status of the drug, if available.");
            Field(x => x.ClinicalTrialId);
        }
    }
    public class BannedComponentType : ObjectGraphType<BannedComponent>
    {
        public BannedComponentType()
        {
            Field(x => x.Id).Description("The ID of the banned component.");
            Field(x => x.Name).Description("The name of the banned component.");
            Field(x => x.ReasonForBan).Description("The reason for banning the component (e.g., Adverse effects, ethical concerns).");
            Field(x => x.RegulatoryActions).Description("The regulatory action taken against the banned component (e.g., Recall, Market Withdrawal).");
            Field(x => x.ClinicalTrialId);
        }
    }

    public class AdverseEffectType : ObjectGraphType<AdverseEffect>
    {
        public AdverseEffectType()
        {
            Field(x => x.Id).Description("The ID of the adverse effect.");
            Field(x => x.Effect).Description("The description of the adverse effect.");
            Field(x => x.Severity).Description("The severity level of the adverse effect (e.g., Mild, Moderate, Severe).");
            Field(x => x.Frequency).Description("The frequency of occurrence of the adverse effect.");
            Field(x => x.ClinicalTrialId);
        }
    }



}


using GraphQL;
using GraphQL.Types;

namespace GraphQL_Presentation_Demo.GraphQL
{
    public class ClinicalTrialsSchema : Schema
    {
        public ClinicalTrialsSchema(IServiceProvider provider) : base(provider)
        {
            Query = provider.GetRequiredService<ClinicalTrialQuery>();
        }
    }
}


using GraphQL.Types;
using GraphQL_Presentation_Demo.GraphQL;
using GraphQL_Presentation_Demo.Models;
using GraphQL;

namespace GraphQL_Presentation_Demo.GraphQL
{
    public class ClinicalTrialQuery : ObjectGraphType
    {
        public ClinicalTrialQuery(SdttContext dbContext)
        {
            // Query for all Trials
            Field<ListGraphType<TrialType>>(
                "trials",
                resolve: context => dbContext.ClinicalTrials.ToList()
            );

            // Query for a single Trial by ID
            Field<TrialType>(
                "trial",
                arguments: new QueryArguments(
                    new QueryArgument<IntGraphType> { Name = "id" }
                ),
                resolve: context =>
                {
                    var trialId = context.GetArgument<int>("id");
                    return dbContext.ClinicalTrials.FirstOrDefault(t => t.Id == trialId);
                }
            );

            // Query for all Banner Components
            Field<ListGraphType<BannedComponentType>>(
                "bannerComponents",
                resolve: context => dbContext.BannedComponents.ToList()
            );

            // Query for Banner Components filtered by Trial ID
            Field<ListGraphType<BannedComponentType>>(
                "bannerComponentsByTrial",
                arguments: new QueryArguments(
                    new QueryArgument<IntGraphType> { Name = "trialId" }
                ),
                resolve: context =>
                {
                    var trialId = context.GetArgument<int?>("trialId");
                    return trialId == null
                        ? dbContext.BannedComponents.ToList()
                        : dbContext.BannedComponents.Where(b => b.ClinicalTrialId == trialId).ToList();
                }
            );

            // Query for all Experiments
            Field<ListGraphType<ExperimentType>>(
                "experiments",
                resolve: context => dbContext.Experiments.ToList()
            );

            // Query for a single Experiment by ID
            Field<ExperimentType>(
                "experiment",
                arguments: new QueryArguments(
                    new QueryArgument<IntGraphType> { Name = "id" }
                ),
                resolve: context =>
                {
                    var experimentId = context.GetArgument<int>("id");
                    return dbContext.Experiments.FirstOrDefault(e => e.Id == experimentId);
                }
            );

            // Query for all Drugs
            Field<ListGraphType<DrugType>>(
                "drugs",
                resolve: context => dbContext.Drugs.ToList()
            );

            // Query for a single Drug by ID
            Field<DrugType>(
                "drug",
                arguments: new QueryArguments(
                    new QueryArgument<IntGraphType> { Name = "id" }
                ),
                resolve: context =>
                {
                    var drugId = context.GetArgument<int>("id");
                    return dbContext.Drugs.FirstOrDefault(d => d.Id == drugId);
                }
            );

            // Query for all Adverse Effects
            Field<ListGraphType<AdverseEffectType>>(
                "adverseEffects",
                resolve: context => dbContext.AdverseEffects.ToList()
            );

            // Query for Adverse Effects by Trial ID
            Field<ListGraphType<AdverseEffectType>>(
                "adverseEffectsByTrial",
                arguments: new QueryArguments(
                    new QueryArgument<IntGraphType> { Name = "trialId" }
                ),
                resolve: context =>
                {
                    var trialId = context.GetArgument<int?>("trialId");
                    return trialId == null
                        ? dbContext.AdverseEffects.ToList()
                        : dbContext.AdverseEffects.Where(a => a.ClinicalTrialId == trialId).ToList();
                }
            );
        }
    }
}

databasemodels

namespace GraphQL_Presentation_Demo.Models;

public partial class ClinicalTrial
{
    public int Id { get; set; }

    public string? Name { get; set; }

    public string? Phase { get; set; }

    public DateTime? StartDate { get; set; }

    public DateTime? EndDate { get; set; }

    public string? CurrentStatus { get; set; }

    public virtual ICollection<AdverseEffect> AdverseEffects { get; set; } = new List<AdverseEffect>();

    public virtual ICollection<BannedComponent> BannedComponents { get; set; } = new List<BannedComponent>();

    public virtual ICollection<Drug> Drugs { get; set; } = new List<Drug>();

    public virtual ICollection<Experiment> Experiments { get; set; } = new List<Experiment>();

    public virtual ICollection<SafetyMeasure> SafetyMeasures { get; set; } = new List<SafetyMeasure>();
}

using System;
using System.Collections.Generic;

namespace GraphQL_Presentation_Demo.Models;

public partial class Drug
{
    public int Id { get; set; }

    public string? Name { get; set; }

    public string? ApprovalStatus { get; set; }

    public string? MarketStatus { get; set; }

    public int? ClinicalTrialId { get; set; }

    public virtual ClinicalTrial? ClinicalTrial { get; set; }
}

using System;
using System.Collections.Generic;

namespace GraphQL_Presentation_Demo.Models;

public partial class Experiment
{
    public int Id { get; set; }

    public int? ClinicalTrialId { get; set; }

    public string? Type { get; set; }

    public string? Species { get; set; }

    public string? GeneticFocus { get; set; }

    public string? SubjectType { get; set; }

    public int? SubjectCount { get; set; }

    public virtual ClinicalTrial? ClinicalTrial { get; set; }
}

using System;
using System.Collections.Generic;

namespace GraphQL_Presentation_Demo.Models;

public partial class BannedComponent
{
    public int Id { get; set; }

    public string? Name { get; set; }

    public int? ClinicalTrialId { get; set; }

    public string? ReasonForBan { get; set; }

    public string? RegulatoryActions { get; set; }

    public DateTime? ActionDate { get; set; }

    public virtual ClinicalTrial? ClinicalTrial { get; set; }
}

using System;
using System.Collections.Generic;

namespace GraphQL_Presentation_Demo.Models;

public partial class AdverseEffect
{
    public int Id { get; set; }

    public int? ClinicalTrialId { get; set; }

    public string? Effect { get; set; }

    public string? Severity { get; set; }

    public string? Frequency { get; set; }

    public string? SubjectType { get; set; }

    public virtual ClinicalTrial? ClinicalTrial { get; set; }
}


Chat::::::::::::::::::::::::::::::::::::::

public class TrialType : ObjectGraphType<ClinicalTrial>
{
    public TrialType()
    {
        Field(x => x.Id);
        Field(x => x.Name);
        Field(x => x.CurrentStatus);
        Field(x => x.Phase);
        Field(x => x.StartDate);
        Field(x => x.EndDate);

        // Resolving related experiments and drugs
        Field<ListGraphType<ExperimentType>>(
            "experiments",
            resolve: context => context.Source.Experiments
        );

        Field<ListGraphType<AdverseEffectType>>(
            "adverseEffects",
            resolve: context => context.Source.AdverseEffects
        );

        Field<ListGraphType<BannedComponentType>>(
            "bannerComponents",
            resolve: context => context.Source.BannedComponents
        );

        Field<ListGraphType<DrugType>>(
            "drugs",
            resolve: context => context.Source.Drugs
        );
    }
}


public class ClinicalTrialQuery : ObjectGraphType
{
    public ClinicalTrialQuery(SdttContext dbContext)
    {
        // Query for all Trials
        Field<ListGraphType<TrialType>>(
            "trials",
            resolve: context => dbContext.ClinicalTrials.Include(t => t.Experiments).Include(t => t.Drugs).ToList() // Include related entities
        );

        // Query for a single Trial by ID
        Field<TrialType>(
            "trial",
            arguments: new QueryArguments(
                new QueryArgument<IntGraphType> { Name = "id" }
            ),
            resolve: context =>
            {
                var trialId = context.GetArgument<int>("id");
                return dbContext.ClinicalTrials
                    .Include(t => t.Experiments)
                    .Include(t => t.Drugs)
                    .FirstOrDefault(t => t.Id == trialId);
            }
        );

        // Other queries for banner components, adverse effects, etc.
        Field<ListGraphType<BannedComponentType>>(
            "bannerComponents",
            resolve: context => dbContext.BannedComponents.ToList()
        );
    }
}

public class ClinicalTrialQuery : ObjectGraphType
{
    public ClinicalTrialQuery(SdttContext dbContext)
    {
        // Query for all Trials with complex filters and sorting
        Field<ListGraphType<TrialType>>(
            "trials",
            arguments: new QueryArguments(
                new QueryArgument<StringGraphType> { Name = "status" },
                new QueryArgument<StringGraphType> { Name = "phase" },
                new QueryArgument<DateTimeGraphType> { Name = "startDate" },
                new QueryArgument<DateTimeGraphType> { Name = "endDate" },
                new QueryArgument<StringGraphType> { Name = "sortBy" },   // New: field to sort by
                new QueryArgument<StringGraphType> { Name = "sortOrder" }  // New: order (asc/desc)
            ),
            resolve: context =>
            {
                var query = dbContext.ClinicalTrials.Include(t => t.Experiments).Include(t => t.Drugs);
                
                // Filters
                var status = context.GetArgument<string>("status");
                var phase = context.GetArgument<string>("phase");
                var startDate = context.GetArgument<DateTime?>("startDate");
                var endDate = context.GetArgument<DateTime?>("endDate");

                if (!string.IsNullOrEmpty(status))
                    query = query.Where(t => t.CurrentStatus == status);

                if (!string.IsNullOrEmpty(phase))
                    query = query.Where(t => t.Phase == phase);

                if (startDate.HasValue)
                    query = query.Where(t => t.StartDate >= startDate.Value);

                if (endDate.HasValue)
                    query = query.Where(t => t.EndDate <= endDate.Value);

                // Sorting Logic
                var sortBy = context.GetArgument<string>("sortBy");
                var sortOrder = context.GetArgument<string>("sortOrder")?.ToLower();

                if (!string.IsNullOrEmpty(sortBy))
                {
                    if (sortOrder == "desc")
                    {
                        if (sortBy == "name")
                            query = query.OrderByDescending(t => t.Name);
                        else if (sortBy == "startDate")
                            query = query.OrderByDescending(t => t.StartDate);
                        // Add other sorting conditions here based on fields
                    }
                    else
                    {
                        if (sortBy == "name")
                            query = query.OrderBy(t => t.Name);
                        else if (sortBy == "startDate")
                            query = query.OrderBy(t => t.StartDate);
                        // Add other sorting conditions here based on fields
                    }
                }

                return query.ToList();
            }
        );

        // Query for a single Trial by ID
        Field<TrialType>(
            "trial",
            arguments: new QueryArguments(
                new QueryArgument<IntGraphType> { Name = "id" }
            ),
            resolve: context =>
            {
                var trialId = context.GetArgument<int>("id");
                return dbContext.ClinicalTrials
                    .Include(t => t.Experiments)
                    .Include(t => t.Drugs)
                    .FirstOrDefault(t => t.Id == trialId);
            }
        );

        // Query for Drugs used in Clinical Trials with filtering and sorting
        Field<ListGraphType<DrugType>>(
            "drugsByTrial",
            arguments: new QueryArguments(
                new QueryArgument<IntGraphType> { Name = "trialId" },
                new QueryArgument<StringGraphType> { Name = "sortBy" },
                new QueryArgument<StringGraphType> { Name = "sortOrder" }
            ),
            resolve: context =>
            {
                var trialId = context.GetArgument<int>("trialId");
                var query = dbContext.Drugs.Where(d => d.ClinicalTrialId == trialId);

                // Sorting Logic for Drugs
                var sortBy = context.GetArgument<string>("sortBy");
                var sortOrder = context.GetArgument<string>("sortOrder")?.ToLower();

                if (!string.IsNullOrEmpty(sortBy))
                {
                    if (sortOrder == "desc")
                    {
                        if (sortBy == "name")
                            query = query.OrderByDescending(d => d.Name);
                        else if (sortBy == "approvalStatus")
                            query = query.OrderByDescending(d => d.ApprovalStatus);
                    }
                    else
                    {
                        if (sortBy == "name")
                            query = query.OrderBy(d => d.Name);
                        else if (sortBy == "approvalStatus")
                            query = query.OrderBy(d => d.ApprovalStatus);
                    }
                }

                return query.ToList();
            }
        );

        // Query for Experiments filtered by ClinicalTrialId with sorting
        Field<ListGraphType<ExperimentType>>(
            "experimentsByTrial",
            arguments: new QueryArguments(
                new QueryArgument<IntGraphType> { Name = "trialId" },
                new QueryArgument<StringGraphType> { Name = "sortBy" },
                new QueryArgument<StringGraphType> { Name = "sortOrder" }
            ),
            resolve: context =>
            {
                var trialId = context.GetArgument<int>("trialId");
                var query = dbContext.Experiments.Where(e => e.ClinicalTrialId == trialId);

                // Sorting Logic for Experiments
                var sortBy = context.GetArgument<string>("sortBy");
                var sortOrder = context.GetArgument<string>("sortOrder")?.ToLower();

                if (!string.IsNullOrEmpty(sortBy))
                {
                    if (sortOrder == "desc")
                    {
                        if (sortBy == "species")
                            query = query.OrderByDescending(e => e.Species);
                        else if (sortBy == "subjectCount")
                            query = query.OrderByDescending(e => e.SubjectCount);
                    }
                    else
                    {
                        if (sortBy == "species")
                            query = query.OrderBy(e => e.Species);
                        else if (sortBy == "subjectCount")
                            query = query.OrderBy(e => e.SubjectCount);
                    }
                }

                return query.ToList();
            }
        );

        // Query for Banned Components filtered by ClinicalTrialId with sorting
        Field<ListGraphType<BannedComponentType>>(
            "bannerComponentsByTrial",
            arguments: new QueryArguments(
                new QueryArgument<IntGraphType> { Name = "trialId" },
                new QueryArgument<StringGraphType> { Name = "sortBy" },
                new QueryArgument<StringGraphType> { Name = "sortOrder" }
            ),
            resolve: context =>
            {
                var trialId = context.GetArgument<int>("trialId");
                var query = dbContext.BannedComponents.Where(b => b.ClinicalTrialId == trialId);

                // Sorting Logic for Banned Components
                var sortBy = context.GetArgument<string>("sortBy");
                var sortOrder = context.GetArgument<string>("sortOrder")?.ToLower();

                if (!string.IsNullOrEmpty(sortBy))
                {
                    if (sortOrder == "desc")
                    {
                        if (sortBy == "name")
                            query = query.OrderByDescending(b => b.Name);
                        else if (sortBy == "actionDate")
                            query = query.OrderByDescending(b => b.ActionDate);
                    }
                    else
                    {
                        if (sortBy == "name")
                            query = query.OrderBy(b => b.Name);
                        else if (sortBy == "actionDate")
                            query = query.OrderBy(b => b.ActionDate);
                    }
                }

                return query.ToList();
            }
        );

        // Query for Adverse Effects filtered by ClinicalTrialId with sorting
        Field<ListGraphType<AdverseEffectType>>(
            "adverseEffectsByTrial",
            arguments: new QueryArguments(
                new QueryArgument<IntGraphType> { Name = "trialId" },
                new QueryArgument<StringGraphType> { Name = "sortBy" },
                new QueryArgument<StringGraphType> { Name = "sortOrder" }
            ),
            resolve: context =>
            {
                var trialId = context.GetArgument<int>("trialId");
                var query = dbContext.AdverseEffects.Where(a => a.ClinicalTrialId == trialId);

                // Sorting Logic for Adverse Effects
                var sortBy = context.GetArgument<string>("sortBy");
                var sortOrder = context.GetArgument<string>("sortOrder")?.ToLower();

                if (!string.IsNullOrEmpty(sortBy))
                {
                    if (sortOrder == "desc")
                    {
                        if (sortBy == "effect")
                            query = query.OrderByDescending(a => a.Effect);
                        else if (sortBy == "severity")
                            query = query.OrderByDescending(a => a.Severity);
                    }
                    else
                    {
                        if (sortBy == "effect")
                            query = query.OrderBy(a => a.Effect);
                        else if (sortBy == "severity")
                            query = query.OrderBy(a => a.Severity);
                    }
                }

                return query.ToList();
            }
        );
    }
}


{
  trials(status: "Completed", phase: "Phase 3") {
    id
    name
    phase
    experiments {
      id
      species
      subjectCount
      subjectType
    }
    drugs {
      id
      name
      approvalStatus
    }
  }
}


{
  drugsByTrial(trialId: 1) {
    id
    name
    approvalStatus
    clinicalTrial {
      name
      phase
    }
  }
}


{
  experimentsByTrial(trialId: 1) {
    id
    species
    subjectCount
    subjectType
    clinicalTrial {
      name
    }
  }
  adverseEffectsByTrial(trialId: 1) {
    id
    effect
    severity
  }
  bannerComponentsByTrial(trialId: 1) {
    id
    name
    reasonForBan
  }
}

{
  trials(startDate: "2020-01-01", endDate: "2023-01-01") {
    id
    name
    bannerComponents {
      id
      name
      reasonForBan
    }
    adverseEffects {
      id
      effect
      severity
    }


using System;
using System.Collections.Generic;
using System.IO;
using OfficeOpenXml;
using Newtonsoft.Json;

class Program
{
    static void Main()
    {
        string filePath = @"path_to_your_excel_file.xlsx";
        string jsonOutputPath = @"path_to_output_json.json";

        var excelData = new Dictionary<string, List<Dictionary<string, string>>>();

        // Load the Excel file
        using (var package = new ExcelPackage(new FileInfo(filePath)))
        {
            foreach (var sheet in package.Workbook.Worksheets)
            {
                var sheetData = new List<Dictionary<string, string>>();

                // Loop through each cell in the worksheet
                for (int row = sheet.Dimension.Start.Row; row <= sheet.Dimension.End.Row; row++)
                {
                    for (int col = sheet.Dimension.Start.Column; col <= sheet.Dimension.End.Column; col++)
                    {
                        var cell = sheet.Cells[row, col];
                        if (cell != null)
                        {
                            var cellData = new Dictionary<string, string>
                            {
                                { "CellAddress", cell.Address },
                                { "CellValue", cell.Text },
                                { "CellFormula", cell.Formula }
                            };
                            sheetData.Add(cellData);
                        }
                    }
                }

                excelData[sheet.Name] = sheetData;
            }
        }

        // Serialize the data to JSON
        string json = JsonConvert.SerializeObject(excelData, Formatting.Indented);

        // Write the JSON to a file
        File.WriteAllText(jsonOutputPath, json);

        Console.WriteLine("JSON file created successfully.");
    }
}

  }
}


using System;
using System.Collections.Generic;
using System.IO;
using Newtonsoft.Json;
using OfficeOpenXml;

class Program
{
    static void Main()
    {
        string jsonOutputPath = @"path_to_output_json.json";
        var excelData = new Dictionary<string, List<object>>();

        using (var package = new ExcelPackage(new FileInfo(@"path_to_excel_file.xlsx")))
        {
            var worksheet = package.Workbook.Worksheets[0]; // Assuming the data is in the first sheet

            // Reading Sequence Details
            var sequenceDetails = new List<Dictionary<string, string>>();
            int row = 1;
            while (true)
            {
                string cellValue = worksheet.Cells[row, 1].Text;
                if (cellValue == "Integration results")
                {
                    break;
                }

                if (!string.IsNullOrWhiteSpace(cellValue))
                {
                    var parameter = new Dictionary<string, string>
                    {
                        { cellValue.TrimEnd(':'), worksheet.Cells[row, 2].Text }
                    };
                    sequenceDetails.Add(parameter);
                }

                cellValue = worksheet.Cells[row, 4].Text;
                if (!string.IsNullOrWhiteSpace(cellValue))
                {
                    var parameter = new Dictionary<string, string>
                    {
                        { cellValue.TrimEnd(':'), worksheet.Cells[row, 5].Text }
                    };
                    sequenceDetails.Add(parameter);
                }
                row++;
            }
            excelData["Sheet1"] = new List<object> { new { SequenceDetails = sequenceDetails } };

            // Reading Integration Results
            var integrationResults = new List<Dictionary<string, string>>();
            row++; // Skip the "Integration results" row
            var headers = new List<string>();
            int col = 1;
            while (!string.IsNullOrWhiteSpace(worksheet.Cells[row, col].Text))
            {
                headers.Add(worksheet.Cells[row, col].Text);
                col++;
            }
            row++; // Move to the first row of data

            while (!string.IsNullOrWhiteSpace(worksheet.Cells[row, 1].Text))
            {
                var rowData = new Dictionary<string, string>();
                for (int i = 0; i < headers.Count; i++)
                {
                    rowData[headers[i]] = worksheet.Cells[row, i + 1].Text;
                }
                integrationResults.Add(rowData);
                row++;
            }

            var tableData = new { IntegrationResults = integrationResults };
            excelData["Sheet1"].Add(tableData);
        }

        // Serialize the data to JSON
        string json = JsonConvert.SerializeObject(excelData, Formatting.Indented);

        // Write the JSON to a file
        File.WriteAllText(jsonOutputPath, json);

        Console.WriteLine("JSON file created successfully.");
    }
}


chat 2---------------------------------------


using System;
using System.Collections.Generic;
using System.IO;
using Newtonsoft.Json;
using OfficeOpenXml;

class Program
{
    static void Main()
    {
        string jsonOutputPath = @"path_to_output_json.json";
        var excelData = new Dictionary<string, List<object>>();

        using (var package = new ExcelPackage(new FileInfo(@"path_to_excel_file.xlsx")))
        {
            var worksheet = package.Workbook.Worksheets[0]; // Assuming the data is in the first sheet

            // Reading Sequence Details
            var sequenceDetails = new List<Dictionary<string, string>>();
            int row = 1;
            while (true)
            {
                string cellValue = worksheet.Cells[row, 1].Text;
                if (cellValue == "Integration results")
                {
                    break;
                }

                if (!string.IsNullOrWhiteSpace(cellValue) && cellValue.Contains(":"))
                {
                    var parameter = cellValue.Split(':')[0].Trim();
                    var value = FindValueForParameter(worksheet, row, 1);
                    if (!string.IsNullOrEmpty(value))
                    {
                        var parameterPair = new Dictionary<string, string>
                        {
                            { parameter, value }
                        };
                        sequenceDetails.Add(parameterPair);
                    }
                }

                cellValue = worksheet.Cells[row, 4].Text;
                if (!string.IsNullOrWhiteSpace(cellValue) && cellValue.Contains(":"))
                {
                    var parameter = cellValue.Split(':')[0].Trim();
                    var value = FindValueForParameter(worksheet, row, 4);
                    if (!string.IsNullOrEmpty(value))
                    {
                        var parameterPair = new Dictionary<string, string>
                        {
                            { parameter, value }
                        };
                        sequenceDetails.Add(parameterPair);
                    }
                }
                row++;
            }
            excelData["Sheet1"] = new List<object> { new { SequenceDetails = sequenceDetails } };

            // Reading Integration Results
            var integrationResults = new List<Dictionary<string, string>>();
            row++; // Skip the "Integration results" row
            var headers = new List<string>();
            int col = 1;
            while (!string.IsNullOrWhiteSpace(worksheet.Cells[row, col].Text))
            {
                headers.Add(worksheet.Cells[row, col].Text);
                col++;
            }
            row++; // Move to the first row of data

            while (!string.IsNullOrWhiteSpace(worksheet.Cells[row, 1].Text))
            {
                var rowData = new Dictionary<string, string>();
                for (int i = 0; i < headers.Count; i++)
                {
                    rowData[headers[i]] = worksheet.Cells[row, i + 1].Text;
                }
                integrationResults.Add(rowData);
                row++;
            }

            var tableData = new { IntegrationResults = integrationResults };
            excelData["Sheet1"].Add(tableData);
        }

        // Serialize the data to JSON
        string json = JsonConvert.SerializeObject(excelData, Formatting.Indented);

        // Write the JSON to a file
        File.WriteAllText(jsonOutputPath, json);

        Console.WriteLine("JSON file created successfully.");
    }

    static string FindValueForParameter(ExcelWorksheet worksheet, int startRow, int startColumn)
    {
        string value = null;
        int row = startRow;
        int col = startColumn + 1;

        // Check the immediate next cell first
        if (!string.IsNullOrWhiteSpace(worksheet.Cells[row, col].Text))
        {
            return worksheet.Cells[row, col].Text;
        }

        // Check subsequent cells in the same row
        while (col < worksheet.Dimension.End.Column)
        {
            if (!string.IsNullOrWhiteSpace(worksheet.Cells[row, col].Text))
            {
                value = worksheet.Cells[row, col].Text;
                break;
            }
            col++;
        }

        // If value is not found in the same row, check the next row
        if (string.IsNullOrEmpty(value))
        {
            row++;
            col = startColumn;
            while (row <= worksheet.Dimension.End.Row)
            {
                if (!string.IsNullOrWhiteSpace(worksheet.Cells[row, col].Text))
                {
                    value = worksheet.Cells[row, col].Text;
                    break;
                }
                row++;
            }
        }

        return value;
    }
}

